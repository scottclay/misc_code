install.packages("rmarkdown")
plot(cars)
library(here)
library(tidyverse)
summary(iris)
# The datasets package needs to be loaded to access our data
# For a full list of these datasets, type library(help = "datasets")
library(datasets)
# The datasets package needs to be loaded to access our data
# For a full list of these datasets, type library(help = "datasets")
library(datasets)
data(iris)
summary(iris)
View(iris)
library(dplyr)
names(iris) <- tolower(names(iris))
library(dplyr)
View(iris)
names(iris) <- toupper(names(iris))
library(dplyr)
View(iris)
summary(iris)
names(iris)
names(iris) <- tolower(names(iris))
library(dplyr)
names(iris)
# filter() the data for species virginica
virginica <- filter(iris, species == "virginica")
head(virginica) # This dispalys the first six rows
plot(iris)
```{r}
plot(iris)
View(iris)
pairs(iris[,1:4], pch = 19,  cex = 0.5,
col = my_cols[iris$Species],
lower.panel=NULL)
pairs(iris[,1:4], pch = 19,  cex = 0.5,
col = names[iris$Species],
lower.panel=NULL)
pairs(iris[,1:4], pch = 19,  cex = 0.5,
col = names[iris],
lower.panel=NULL)
pairs(iris[,1:4], pch = 19,  cex = 0.5,
col = names(iris),
lower.panel=NULL)
pairs(iris[,1:4], pch = 19,  cex = 0.5,
col = my_cols[iris$Species],
lower.panel=NULL)
my_cols <- c("#00AFBB", "#E7B800", "#FC4E07")
my_cols <- c("#00AFBB", "#E7B800", "#FC4E07")
pairs(iris[,1:4], pch = 19,  cex = 0.5,
col = my_cols[iris$Species],
lower.panel=NULL)
plot(iris)
my_cols <- c("#00AFBB", "#E7B800", "#FC4E07")
my_cols <- c("#00AFBB", "#E7B800", "#FC4E07")
pairs(iris[,1:4], pch = 19,  cex = 0.5,
col = my_cols[iris$Species],
lower.panel=NULL)
pairs(iris[,1:4], pch = 19, lower.panel = NULL)
my_cols <- c("#00AFBB", "#E7B800", "#FC4E07")
pairs(iris[,1:4], pch = 19,  cex = 0.5,
col = my_cols[iris$Species],
lower.panel=NULL)
pairs(iris[,1:4], pch = 19)
pairs(iris[,1:4], pch = 19, lower.panel = NULL)
pairs(iris[,1:4], pch = 19,  cex = 0.5,
col = my_cols[iris$species],
lower.panel=NULL)
pairs(iris[,1:4], pch = 19,  cex = 0.5,col = my_cols[iris$species],lower.panel=NULL)
pairs(iris[,1:4], pch = 25,  cex = 0.5,col = my_cols[iris$species],lower.panel=NULL)
my_cols <- c("#00AFBB", "#E7B800", "#FC4E07")
pairs(iris[,1:4], pch = 25,  cex = 0.5,col = my_cols[iris$species],lower.panel=NULL)
iris
iris.species
iris[species]
iris
iris_new <- iris %>%
mutate(Regulation = if_else(species == 'setosa', 1, 0))
my_cols <- c("#00AFBB", "#E7B800", "#FC4E07")
my_cols <- c("#00AFBB", "#E7B800", "#FC4E07")
pairs(iris_new[,1:4], pch = 25,  cex = 0.5,col = my_cols[iris_new$species],lower.panel=NULL)
iris_new
iris_new <- iris %>%
mutate(label = if_else(species == 'setosa', 1, 0))
iris_new
my_cols <- c("#00AFBB", "#E7B800", "#FC4E07")
my_cols <- c("#00AFBB", "#E7B800", "#FC4E07")
pairs(iris_new[,1:4], pch = 25,  cex = 0.5,col = my_cols[iris_new$label],lower.panel=NULL)
my_cols <- c("#00AFBB", "#E7B800")
pairs(iris_new[,1:4], pch = 25,  cex = 0.5,col = my_cols[iris_new$label],lower.panel=NULL)
pairs(iris_new[,1:5], pch = 25,  cex = 0.5,col = my_cols[iris_new$label],lower.panel=NULL)
pairs(iris_new[,1:6], pch = 25,  cex = 0.5,col = my_cols[iris_new$label],lower.panel=NULL)
iris
my_cols[iris$species]
my_cols <- c("#00AFBB", "#E7B800", "#FC4E07")
pairs(iris[,1:4], pch = 25,  cex = 0.5,col = my_cols[iris$species],lower.panel=NULL)
iris
my_cols[iris$species]
my_cols <- c("#00AFBB", "#E7B800")
my_cols[iris_new$label]
iris_new
iris_new[label]
iris_new[sepal.length]
iris_new
iris_new[6]
my_cols <- c("#00AFBB", "#E7B800")
my_cols[iris_new$label]
iris_new <- iris %>%
mutate(label = if_else(species == 'setosa', 1, 0)) %>%
mutate(color) = if_else(species == 'setosa', "#00AFBB", "#E7B800"))
iris_new <- iris %>%
mutate(label = if_else(species == 'setosa', 1, 0) %>%
mutate(color) = if_else(species == 'setosa', "#00AFBB", "#E7B800"))
mutate(color) = if_else(species == 'setosa', "#00AFBB", "#E7B800")
mutate(color) = if_else(species == 'setosa', "#00AFBB", "#E7B800")
iris_new
mutate(label = if_else(species == 'setosa', 1, 0) %>%
iris_new
iris_new
iris_new <- iris %>%
iris_new
iris_new <- iris %>%
mutate(label = if_else(species == 'setosa', 1, 0)) %>%
mutate(color = if_else(species == 'setosa', "#00AFBB", "#E7B800"))
iris_new
iris_new[6]
pairs(iris_new[,1:6], pch = 25,  cex = 0.5,col = color,lower.panel=NULL)
iris_new[,"color"]
pairs(iris_new[,1:6], pch = 25,  cex = 0.5,col = iris_new[,"color"],lower.panel=NULL)
pairs(iris_new[,1:4], pch = 25,  cex = 0.5,col = iris_new[,"color"],lower.panel=NULL)
pairs(iris_new[,1:4], pch = 25,  cex = 0.5,col = iris_new[,"color"],lower.panel=NULL)
iris_new
X %>% select(sepal.length, sepal.width)
X < - iris_new%>% select(sepal.length, sepal.width)
X <- iris_new%>% select(sepal.length, sepal.width)
X
y <- iris_new%>% select(label)
X.head()
X.head
X <- iris_new%>% select(sepal.length, sepal.width, petal.length, petal.width)
y <- iris_new%>% select(label)
head(X)
head(y)
set.seed(42) # Set Seed so that same sample can be reproduced in future also
# Now Selecting 75% of data as sample from total 'n' rows of the data
sample <- sample.int(n = nrow(data), size = floor(.75*nrow(data)), replace = F)
# Now Selecting 75% of data as sample from total 'n' rows of the data
sample <- sample.int(n = nrow(iris_new), size = floor(.75*nrow(data)), replace = F)
# Now Selecting 75% of data as sample from total 'n' rows of the data
sample <- sample.int(n = nrow(iris_new), size = floor(.75*nrow(iris_new)), replace = F)
train <- data[sample, ]
train <- iris_new[sample, ]
test  <- iris_new[-sample, ]
train <- iris_new[sample, ]%>% select(sepal.length, sepal.width, petal.length, petal.width)
train <- iris_new[sample, ]
test  <- iris_new[-sample, ]
X_train = train%>% select(sepal.length, sepal.width, petal.length, petal.width)
X_test = test%>% select(sepal.length, sepal.width, petal.length, petal.width)
y_train = train%>%select(label)
y_test =  test%>%select(label)
head(X_train)
head(y_train)
# logistic regression
glm.out <- glm(Species ~ Sepal.Width + Sepal.Length + Petal.Width + Petal.Length,
data = iris.small,
family = binomial) # family = binomial required for logistic regression
set.seed(42) # Set Seed so that same sample can be reproduced in future also
# Now Selecting 75% of data as sample from total 'n' rows of the data
sample <- sample.int(n = nrow(iris_new), size = floor(.75*nrow(iris_new)), replace = F)
train <- iris_new[sample, ]%>% select(sepal.length, sepal.width, petal.length, petal.width, label)
test  <- iris_new[-sample, ]%>% select(sepal.length, sepal.width, petal.length, petal.width, label)
head(X_train)
head(train)
head(test)
# logistic regression
glm.out <- glm(Species ~ Sepal.Width + Sepal.Length + Petal.Width + Petal.Length,
data = train,
family = binomial) # family = binomial required for logistic regression
# logistic regression
glm.out <- glm(label ~ sepal.width + sepal.length + petal.width + petal.length,
data = train,
family = binomial) # family = binomial required for logistic regression
summary(glm.out)
# logistic regression
glm.out <- glm(label ~ sepal.width + sepal.length + petal.width + petal.length,
data = iris_new,
family = binomial) # family = binomial required for logistic regression
summary(glm.out)
glm.out
glm.out$linear.predictors
lr_data <- data.frame(predictor=glm.out$linear.predictors, prob=glm.out$fitted.values, Species=iris.small$Species)
ggplot(lr_data, aes(x=predictor, y=prob, color=Species)) + geom_point()
lr_data <- data.frame(predictor=glm.out$linear.predictors, prob=glm.out$fitted.values, Species=iris_new$Species)
lr_data <- data.frame(predictor=glm.out$linear.predictors, prob=glm.out$fitted.values, Species=iris_new$Species)
lr_data <- iris_new.frame(predictor=glm.out$linear.predictors, prob=glm.out$fitted.values, Species=iris_new$Species)
lr_data <- data.frame(predictor=glm.out$linear.predictors, prob=glm.out$fitted.values, Species=iris_new$species)
ggplot(lr_data, aes(x=predictor, y=prob, color=Species)) + geom_point()
# logistic regression
glm.out <- glm(label ~ sepal.width + sepal.length,
data = iris_new,
family = binomial) # family = binomial required for logistic regression
summary(glm.out)
lr_data <- data.frame(predictor=glm.out$linear.predictors, prob=glm.out$fitted.values, Species=iris_new$species)
ggplot(lr_data, aes(x=predictor, y=prob, color=Species)) + geom_point()
# logistic regression
glm.out <- glm(label ~ sepal.width + sepal.length + petal.width + petal.length,
data = train,
family = binomial) # family = binomial required for logistic regression
summary(glm.out)
# logistic regression
glm.out <- glm(label ~ sepal.width + sepal.length + petal.width + petal.length,
data = train,
family = binomial) # family = binomial required for logistic regression
# logistic regression
glm.out <- glm(label ~ sepal.width + sepal.length + petal.width + petal.length,
data = train,
family = binomial) # family = binomial required for logistic regression
summary(glm.out)
lr_data <- data.frame(predictor=glm.out$linear.predictors, prob=glm.out$fitted.values, Species=iris_new$species)
ggplot(lr_data, aes(x=predictor, y=prob, color=Species)) + geom_point()
predict(glm.out, test, type="response")
test
test <- test %>%
mutate(predict = predict(glm.out, test, type="response"))
test
test <- test %>%
mutate(predict = predict(glm.out, test, type="response")) %>%
mutate(predict_label = if_else(predict >= 0.5, 1, 0))
test
test$predict_label
test$label
true <- sum(test$predict_label == test$label)
true
false <- sum(test$predict_label != test$label)
true
false
library(tidyverse)
# The datasets package needs to be loaded to access our data
# For a full list of these datasets, type library(help = "datasets")
library(datasets)
data(iris)
summary(iris)
names(iris) <- tolower(names(iris))
library(dplyr)
names(iris)
# filter() the data for species virginica
virginica <- filter(iris, species == "virginica")
head(virginica) # This dispalys the first six rows
my_cols <- c("#00AFBB", "#E7B800", "#FC4E07")
pairs(iris[,1:4], pch = 25,  cex = 0.5,col = my_cols[iris$species],lower.panel=NULL)
iris
my_cols[iris$species]
iris_new <- iris %>%
mutate(label = if_else(species == 'setosa', 1, 0)) %>%
mutate(color = if_else(species == 'setosa', "#00AFBB", "#E7B800"))
iris_new
pairs(iris_new[,1:4], pch = 25,  cex = 0.5,col = iris_new[,"color"],lower.panel=NULL)
set.seed(42) # Set Seed so that same sample can be reproduced in future also
# Now Selecting 75% of data as sample from total 'n' rows of the data
sample <- sample.int(n = nrow(iris_new), size = floor(.75*nrow(iris_new)), replace = F)
train <- iris_new[sample, ]%>% select(sepal.length, sepal.width, petal.length, petal.width, label)
test  <- iris_new[-sample, ]%>% select(sepal.length, sepal.width, petal.length, petal.width, label)
head(train)
head(test)
# logistic regression
glm.out <- glm(label ~ sepal.width + sepal.length + petal.width + petal.length,
data = train,
family = binomial) # family = binomial required for logistic regression
summary(glm.out)
lr_data <- data.frame(predictor=glm.out$linear.predictors, prob=glm.out$fitted.values, Species=iris_new$species)
lr_data <- data.frame(predictor=glm.out$linear.predictors, prob=glm.out$fitted.values, Species=train$species)
View(iris)
View(lr_data)
View(y_train)
View(test)
View(train)
View(lr_data)
View(iris)
View(iris_new)
rm(list=ls())
library(tidyverse)
# The datasets package needs to be loaded to access our data
# For a full list of these datasets, type library(help = "datasets")
library(datasets)
data(iris)
summary(iris)
names(iris) <- tolower(names(iris))
library(dplyr)
names(iris)
# filter() the data for species virginica
virginica <- filter(iris, species == "virginica")
head(virginica) # This dispalys the first six rows
my_cols <- c("#00AFBB", "#E7B800", "#FC4E07")
pairs(iris[,1:4], pch = 25,  cex = 0.5,col = my_cols[iris$species],lower.panel=NULL)
iris
my_cols[iris$species]
iris_new <- iris %>%
mutate(label = if_else(species == 'setosa', 1, 0)) %>%
mutate(color = if_else(species == 'setosa', "#00AFBB", "#E7B800"))
iris_new
pairs(iris_new[,1:4], pch = 25,  cex = 0.5,col = iris_new[,"color"],lower.panel=NULL)
set.seed(42) # Set Seed so that same sample can be reproduced in future also
# Now Selecting 75% of data as sample from total 'n' rows of the data
sample <- sample.int(n = nrow(iris_new), size = floor(.75*nrow(iris_new)), replace = F)
train <- iris_new[sample, ]%>% select(sepal.length, sepal.width, petal.length, petal.width, label)
test  <- iris_new[-sample, ]%>% select(sepal.length, sepal.width, petal.length, petal.width, label)
head(train)
head(test)
# logistic regression
glm.out <- glm(label ~ sepal.width + sepal.length + petal.width + petal.length,
data = train,
family = binomial) # family = binomial required for logistic regression
summary(glm.out)
lr_data <- data.frame(predictor=glm.out$linear.predictors, prob=glm.out$fitted.values, Species=train$species)
lr_data <- data.frame(predictor=glm.out$linear.predictors, prob=glm.out$fitted.values, Species=train$label)
ggplot(lr_data, aes(x=predictor, y=prob, color=Species)) + geom_point()
rm(list=ls())
library(tidyverse)
# The datasets package needs to be loaded to access our data
# For a full list of these datasets, type library(help = "datasets")
library(datasets)
data(iris)
summary(iris)
names(iris) <- tolower(names(iris))
library(dplyr)
names(iris)
# filter() the data for species virginica
virginica <- filter(iris, species == "virginica")
head(virginica) # This dispalys the first six rows
my_cols <- c("#00AFBB", "#E7B800", "#FC4E07")
pairs(iris[,1:4], pch = 25,  cex = 0.5,col = my_cols[iris$species],lower.panel=NULL)
iris
my_cols[iris$species]
iris_new <- iris %>%
mutate(label = if_else(species == 'setosa', 1, 0)) %>%
mutate(color = if_else(species == 'setosa', "#00AFBB", "#E7B800"))
iris_new
pairs(iris_new[,1:4], pch = 25,  cex = 0.5,col = iris_new[,"color"],lower.panel=NULL)
set.seed(42) # Set Seed so that same sample can be reproduced in future also
# Now Selecting 75% of data as sample from total 'n' rows of the data
sample <- sample.int(n = nrow(iris_new), size = floor(.75*nrow(iris_new)), replace = F)
train <- iris_new[sample, ]%>% select(sepal.length, sepal.width, petal.length, petal.width, label)
test  <- iris_new[-sample, ]%>% select(sepal.length, sepal.width, petal.length, petal.width, label)
head(train)
head(test)
# logistic regression
glm.out <- glm(label ~ sepal.width + sepal.length + petal.width + petal.length,
data = train,
family = binomial) # family = binomial required for logistic regression
summary(glm.out)
lr_data <- data.frame(predictor=glm.out$linear.predictors, prob=glm.out$fitted.values, Species=train$label)
ggplot(lr_data, aes(x=predictor, y=prob, color=Species)) + geom_point()
predict(glm.out, test, type="response")
test <- test %>%
mutate(predict = predict(glm.out, test, type="response")) %>%
mutate(predict_label = if_else(predict >= 0.5, 1, 0))
test
test$predict_label
test$label
true <- sum(test$predict_label == test$label)
false <- sum(test$predict_label != test$label)
true
false
``` rm(list=ls())
library(tidyverse)
# The datasets package needs to be loaded to access our data
# For a full list of these datasets, type library(help = "datasets")
library(datasets)
data(iris)
summary(iris)
names(iris) <- tolower(names(iris))
library(dplyr)
names(iris)
# filter() the data for species virginica
virginica <- filter(iris, species == "virginica")
head(virginica) # This dispalys the first six rows
my_cols <- c("#00AFBB", "#E7B800", "#FC4E07")
pairs(iris[,1:4], pch = 25,  cex = 0.5,col = my_cols[iris$species],lower.panel=NULL)
iris
my_cols[iris$species]
iris_new <- iris %>%
mutate(label = if_else(species == 'setosa', 1, 0)) %>%
mutate(color = if_else(species == 'setosa', "#00AFBB", "#E7B800"))
iris_new
pairs(iris_new[,1:4], pch = 25,  cex = 0.5,col = iris_new[,"color"],lower.panel=NULL)
set.seed(42) # Set Seed so that same sample can be reproduced in future also
# Now Selecting 75% of data as sample from total 'n' rows of the data
sample <- sample.int(n = nrow(iris_new), size = floor(.75*nrow(iris_new)), replace = F)
train <- iris_new[sample, ]%>% select(sepal.length, sepal.width, petal.length, petal.width, label)
test  <- iris_new[-sample, ]%>% select(sepal.length, sepal.width, petal.length, petal.width, label)
head(train)
head(test)
# logistic regression
glm.out <- glm(label ~ sepal.width + sepal.length + petal.width + petal.length,
data = train,
family = binomial) # family = binomial required for logistic regression
summary(glm.out)
lr_data <- data.frame(predictor=glm.out$linear.predictors, prob=glm.out$fitted.values, Species=train$label)
ggplot(lr_data, aes(x=predictor, y=prob, color=Species)) + geom_point()
predict(glm.out, test, type="response")
test <- test %>%
mutate(predict = predict(glm.out, test, type="response")) %>%
mutate(predict_label = if_else(predict >= 0.5, 1, 0))
test
test$predict_label
test$label
true <- sum(test$predict_label == test$label)
false <- sum(test$predict_label != test$label)
true
false
``` rm(list=ls())
